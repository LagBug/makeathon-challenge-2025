from typing import List, Optional
from pydantic import Field
import instructor
from atomic_agents.lib.base.base_io_schema import BaseIOSchema


# Enhanced output schema with case analysis
class CustomOutputSchema(BaseIOSchema):
    """This schema represents the response generated by the chat agent."""

    chat_message: str = Field(
        ...,
        description="Το μηνύμα μεταξύ του χρήστη και του chat agent.",
    )

    # Case Information Extraction
    extracted_registration_number: Optional[str] = Field(
        None, description="Αριθμός πινακίδας ή κυκλοφορίας, αν αναφέρεται ή είναι ορατή"
    )
    extracted_customer_name: Optional[str] = Field(
        None, description="Όνομα και επίθετο πελάτη"
    )
    extracted_location: Optional[str] = Field(
        None,
        description="Τοποθεσία του περιστατικού. Αν δεν είναι ακριβής, στείλε geolocation link",
    )
    extracted_destination: Optional[str] = Field(
        None, description="Τελικός προορισμός του οχήματος"
    )

    # Case Classification
    case_type: Optional[str] = Field(
        None,
        description="'Ατύχημα' για ατυχήματα, 'Οδική βοήθεια' για περιπτώσεις βλάβης του αυτοκινήτου",
    )
    case_description: Optional[str] = Field(
        None, description="Συνοπτική περιγραφή του περιστατικού"
    )

    # Smart Analysis
    damage_severity: Optional[str] = Field(
        None,
        description="Μικρό, Μέτριο, Μεγάλο, ανάλογα με το βαθμό βλάβης του οχήματος",
    )
    recommended_action: Optional[str] = Field(
        None,
        description="Επόμενη προτεινόμενη ενέργεια για τον πελάτη, βάση του περιστατικού",
    )

    # Decision Flags
    is_fast_track: Optional[bool] = Field(
        None,
        description="True μόνο εάν 1) Το χτύπημα είναι από το πίσω όχημα (ο κλασικός 'πάτησα φρένο και με χτύπησε'). 2) Το χτύπημα έγινε ενώ το όχημά μας ήταν σταθμευμένο. 3) Υπάρχει Παραβίαση σήμανσης (π.χ. Stop) 4) Υπάρχουν Γενικές απαγορεύσεις (π.χ. ξεπαρκάρισμα, όπισθεν, άνοιγμα θύρας κ.ά.)",
    )
    fraud_risk: Optional[bool] = Field(
        None,
        description="True εάν εμπλέκονται φίλοι/γνωστοί του πελατών, ή αν υπάρχουν ασυνήθιστες πληροφορίες (π.χ. οδηγός με πολλαπλές κυκλοφορικές παραβιάσεις)",
    )
    needs_geolocation: Optional[bool] = Field(
        None,
        description="True εάν η τοποθεσία δεν είναι ακριβής (π.χ. εθνική οδός, πολλαπλές τοποθεσίες με το ίδιο όνομα, κλπ.)",
    )
    needs_sworn_declaration: Optional[bool] = Field(
        None,
        description="True εάν υπάρχουν ειδικές περιπτώσεις (π.χ. χαμηλόμένο όχημα, ασταθής εδαφική επιφάνεια, κλπ.)",
    )
    delay_compensation: Optional[bool] = Field(
        None,
        description="True εάν η τοποθεσία του περιστατικού είναι σε άλλο νομό από τον τελικό προορισμό του οχήματος",
    )
    out_of_prefecture: Optional[bool] = Field(
        None,
        description="True εάν ο τελικός προορισμός του οχήματος είναι σε άλλο νομό από την τοποθεσία του περιστατικού",
    )


# Decision agent schemas for AC/RA classification
class CaseDecisionInputSchema(BaseIOSchema):
    """Input schema for the Case Decision Agent."""

    user_message: str = Field(
        ..., description="The user's description of their vehicle situation"
    )
    chat_context: Optional[str] = Field(
        None, description="Previous conversation context if available"
    )


class CaseDecisionOutputSchema(BaseIOSchema):
    """Output schema for the Case Decision Agent."""

    reasoning: str = Field(
        ..., description="Detailed explanation of the decision-making process in Greek"
    )
    case_type: str = Field(
        ...,
        description="AC for Accident Care, RA for Road Assistance, or OTHER for non-vehicle issues",
    )
    confidence_level: str = Field(
        ..., description="HIGH, MEDIUM, or LOW confidence in the decision"
    )
    key_indicators: List[str] = Field(
        ..., description="List of key phrases/indicators that led to the decision"
    )
    recommended_questions: List[str] = Field(
        default=[],
        description="Follow-up questions to gather more information if needed",
    )


# Image analysis schemas
class VehicleImageAnalysis(BaseIOSchema):
    """Analysis results from vehicle/accident images"""

    image_type: str = Field(
        ...,
        description="Type of image: 'damage', 'registration', 'license_plate', 'accident_scene', 'breakdown', 'other'",
    )
    damage_description: Optional[str] = Field(
        None, description="Detailed description of any visible damage"
    )
    license_plate_number: Optional[str] = Field(
        None, description="License plate number if visible"
    )
    vehicle_make_model: Optional[str] = Field(
        None, description="Vehicle make and model if identifiable"
    )
    location_details: Optional[str] = Field(
        None, description="Any location information visible in the image"
    )
    severity_assessment: Optional[str] = Field(
        None, description="Assessment of damage severity: 'minor', 'moderate', 'severe'"
    )
    recommended_action: Optional[str] = Field(
        None, description="Recommended next steps based on the image"
    )
    relevant_case_info: Optional[str] = Field(
        None, description="Any other case-relevant information extracted"
    )


class ImageAnalysisInput(BaseIOSchema):
    """Input schema for image analysis with chat context"""

    instruction_text: str = Field(
        ..., description="The instruction for analyzing the images"
    )
    images: List[instructor.Image] = Field(..., description="The images to analyze")
    chat_context: Optional[str] = Field(
        None, description="Current chat conversation context"
    )


class ImageAnalysisOutput(BaseIOSchema):
    """Output schema containing image analysis and chat response"""

    chat_message: str = Field(
        ..., description="Response message to the user about the images"
    )
    image_analyses: List[VehicleImageAnalysis] = Field(
        ..., description="Detailed analysis of each uploaded image"
    )
    extracted_case_info: Optional[str] = Field(
        None, description="Any case information extracted from images"
    )
